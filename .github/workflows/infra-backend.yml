name: Backend Terraform (S3 + DynamoDB)

on:
  push:
    branches: [main, feature/migracao_eks]
    paths:
      - 'infra/backend/**'
      - '.github/workflows/infra-backend.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: Criar Backend Terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init (sem backend)
        working-directory: ./infra/backend
        run: terraform init
      
      - name: Verificar formatação Terraform
        working-directory: ./infra/backend
        run: terraform fmt -check
      
      - name: Validar Terraform
        working-directory: ./infra/backend
        run: terraform validate
      
      - name: Limpar recursos existentes para recriação
        working-directory: ./infra/backend
        run: |
          echo "🧹 Limpando recursos existentes para recriação..."
          
          # Remove bucket S3 se existir (verifica globalmente)
          echo "🔍 Verificando bucket S3 em todas as regiões..."
          
          # Lista de regiões principais para verificar
          REGIONS=("us-east-1" "us-west-2" "eu-west-1" "ap-southeast-1")
          BUCKET_FOUND=false
          
          for region in "${REGIONS[@]}"; do
            echo "🔍 Verificando região: $region"
            if aws s3api head-bucket --bucket lanchonete-terraform-state --region $region 2>/dev/null; then
              echo "📍 Bucket encontrado na região: $region"
              echo "🗑️ Removendo bucket S3 existente..."
              
              # Esvazia o bucket primeiro
              aws s3 rm s3://lanchonete-terraform-state --recursive --region $region || true
              
              # Remove versionamento se houver
              aws s3api delete-bucket-versioning --bucket lanchonete-terraform-state --region $region || true
              
              # Remove o bucket
              aws s3api delete-bucket --bucket lanchonete-terraform-state --region $region || true
              
              echo "⏳ Aguardando propagação da remoção do S3 (30s)..."
              sleep 30
              
              echo "✅ Bucket S3 removido da região $region"
              BUCKET_FOUND=true
              break
            fi
          done
          
          if [ "$BUCKET_FOUND" = false ]; then
            echo "ℹ️ Bucket S3 não encontrado em nenhuma região conhecida"
          fi
          
          # Remove tabela DynamoDB se existir
          if aws dynamodb describe-table --table-name lanchonete-terraform-locks 2>/dev/null; then
            echo "🗑️ Removendo tabela DynamoDB existente..."
            aws dynamodb delete-table --table-name lanchonete-terraform-locks || true
            
            # Aguarda a tabela ser deletada
            echo "⏳ Aguardando remoção da tabela DynamoDB..."
            aws dynamodb wait table-not-exists --table-name lanchonete-terraform-locks || true
            echo "✅ Tabela DynamoDB removida"
          fi
          
          echo "✅ Limpeza concluída - recursos serão recriados"
      
      - name: Terraform Plan
        working-directory: ./infra/backend
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: ./infra/backend
        run: terraform apply -auto-approve tfplan
      
      - name: Salvar outputs
        working-directory: ./infra/backend
        run: |
          terraform output -json > backend-outputs.json
          cat backend-outputs.json
      
      - name: Upload outputs como artefato
        uses: actions/upload-artifact@v4
        with:
          name: backend-outputs
          path: infra/backend/backend-outputs.json
          retention-days: 7