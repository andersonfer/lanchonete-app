# Plano de Migração: Reestruturação Completa para Clean Architecture

## 🎯 OBJETIVO
Reorganizar completamente a estrutura de pacotes para seguir rigorosamente os princípios de Clean Architecture.

## 📋 ESTRUTURA ALVO

```
br.com.lanchonete.autoatendimento/
│
├── aplicacao/                    # Application Business Rules
│   ├── casosdeuso/              # Use Cases
│   │   ├── cliente/
│   │   │   ├── CadastrarCliente.java
│   │   │   └── IdentificarCliente.java
│   │   ├── produto/
│   │   │   ├── CriarProduto.java
│   │   │   ├── EditarProduto.java
│   │   │   ├── RemoverProduto.java
│   │   │   └── BuscarProdutosPorCategoria.java
│   │   └── pedido/
│   │       ├── RealizarPedido.java
│   │       └── ListarPedidos.java
│   ├── servicos/                # Application Services  
│   │   ├── ClienteApplicationService.java
│   │   ├── ProdutoApplicationService.java
│   │   └── PedidoApplicationService.java
│   └── portas/                  # Interfaces (Ports)
│       ├── entrada/             # Input Ports (se necessário)
│       └── saida/               # Output Ports (Gateways)
│           ├── ClienteGateway.java
│           ├── ProdutoGateway.java
│           └── PedidoGateway.java
│
├── dominio/                     # Enterprise Business Rules
│   ├── modelo/                  # Entities + Value Objects
│   │   ├── cliente/
│   │   │   └── Cliente.java
│   │   ├── produto/
│   │   │   ├── Produto.java
│   │   │   └── Categoria.java
│   │   ├── pedido/
│   │   │   ├── Pedido.java
│   │   │   ├── ItemPedido.java
│   │   │   └── StatusPedido.java
│   │   └── shared/
│   │       ├── Cpf.java
│   │       ├── Email.java
│   │       ├── Preco.java
│   │       └── NumeroPedido.java
│   └── excecoes/               # Domain Exceptions
│       ├── ValidacaoException.java
│       └── RecursoNaoEncontradoException.java
│
├── adaptadores/                 # Interface Adapters
│   ├── rest/                   # REST Layer
│   │   ├── controllers/
│   │   │   ├── ClienteController.java
│   │   │   ├── ProdutoController.java
│   │   │   ├── PedidoController.java
│   │   │   └── TratarExcecaoController.java
│   │   ├── api/
│   │   │   ├── ClienteApi.java
│   │   │   ├── ProdutoApi.java
│   │   │   └── PedidoApi.java
│   │   └── dto/
│   │       ├── ClienteRequestDTO.java
│   │       ├── ClienteResponseDTO.java
│   │       ├── ProdutoRequestDTO.java
│   │       ├── ProdutoResponseDTO.java
│   │       ├── PedidoRequestDTO.java
│   │       ├── PedidoResponseDTO.java
│   │       ├── ItemPedidoDTO.java
│   │       └── ItemPedidoResponseDTO.java
│   └── persistencia/           # Data Access Layer
│       ├── ClienteGatewayJDBC.java
│       ├── ProdutoGatewayJDBC.java
│       └── PedidoGatewayJDBC.java
│
└── infra/                      # Frameworks & Drivers
    ├── config/
    │   ├── ClienteServiceConfig.java
    │   ├── ProdutoServiceConfig.java
    │   ├── PedidoServiceConfig.java
    │   ├── RepositorioConfig.java
    │   ├── JdbcConfig.java
    │   └── SwaggerConfig.java
    └── util/
        └── Utils.java
```

## 🔄 PLANO DE MIGRAÇÃO

### **FASE 1: CRIAR NOVA ESTRUTURA**
1. Criar pacotes da nova estrutura
2. Mover arquivos para posições corretas
3. Atualizar todos os imports

### **FASE 2: REORGANIZAR DOMÍNIO**
1. Mover entidades para `dominio/modelo/`
2. Mover exceções para `dominio/excecoes/`
3. Atualizar imports das entidades

### **FASE 3: REORGANIZAR APLICAÇÃO**
1. Mover Use Cases para `aplicacao/casosdeuso/`
2. Mover interfaces para `aplicacao/portas/saida/`
3. Criar Application Services em `aplicacao/servicos/`

### **FASE 4: REORGANIZAR ADAPTADORES**
1. Mover Controllers para `adaptadores/rest/controllers/`
2. Mover APIs para `adaptadores/rest/api/`
3. Mover DTOs para `adaptadores/rest/dto/`
4. Mover Gateways para `adaptadores/persistencia/`

### **FASE 5: REORGANIZAR INFRAESTRUTURA**
1. Mover configurações para `infra/config/`
2. Mover utilitários para `infra/util/`

### **FASE 6: ATUALIZAR DEPENDÊNCIAS**
1. Controllers injetam Application Services
2. Application Services injetam Use Cases
3. Use Cases dependem de interfaces (portas)
4. Gateways implementam interfaces

### **FASE 7: LIMPEZA E VALIDAÇÃO**
1. Remover anotações Spring dos Use Cases
2. Verificar Dependency Rule
3. Executar todos os testes
4. Validar endpoints

## ⚠️ CUIDADOS ESPECIAIS

1. **Manter funcionalidade:** Todos os testes devem continuar passando
2. **Atualizar imports:** Será necessário atualizar muitos imports
3. **Configurações Spring:** Ajustar scan de componentes para nova estrutura
4. **Testes:** Atualizar packages nos testes

## 📊 RESULTADO ESPERADO

- ✅ 100% conforme Clean Architecture
- ✅ Dependency Rule respeitada
- ✅ Separação clara de responsabilidades
- ✅ Código mais maintível e testável
- ✅ Estrutura escalável para crescimento

## 🎯 BENEFÍCIOS

1. **Clareza arquitetural:** Cada camada tem responsabilidade bem definida
2. **Testabilidade:** Use Cases puros, sem dependências de framework
3. **Manutenibilidade:** Mudanças isoladas em suas respectivas camadas
4. **Escalabilidade:** Estrutura preparada para crescimento do sistema
5. **Conformidade:** 100% alinhado com princípios Clean Architecture