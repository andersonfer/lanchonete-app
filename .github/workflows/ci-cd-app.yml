name: CI/CD - Lanchonete App

on:
  push:
    branches-ignore: [ main ]
    paths:
      - 'app/**'
      - 'k8s_manifests/**'
      - 'scripts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'k8s_manifests/**'
      - 'scripts/**'

env:
  AWS_REGION: us-east-1

jobs:
  test:
    name: 🧪 Testes
    runs-on: ubuntu-latest
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Executar testes - Autoatendimento
      run: |
        cd app/autoatendimento
        mvn clean test

    - name: Executar testes - Pagamento
      run: |
        cd app/pagamento
        mvn clean test

  build-and-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Instalar Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configurar kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name lanchonete-cluster
        kubectl version --client

    - name: Atualizar manifests com URLs dinâmicas
      run: ./scripts/update-manifests.sh

    - name: Build e Push das imagens Docker
      run: ./scripts/build-and-push.sh

    - name: Deploy no Kubernetes
      run: ./scripts/deploy-k8s.sh

    - name: Aguardar pods prontos
      run: |
        echo "⏳ Aguardando 30s para pods ficarem completamente prontos..."
        sleep 30

  smoke-test:
    name: 🔍 Smoke Tests
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Configurar kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name lanchonete-cluster

    - name: Health Check - Autoatendimento
      run: |
        echo "🔍 Testando health check do Autoatendimento..."
        ALB_URL=$(kubectl get ingress autoatendimento-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        if [ -z "$ALB_URL" ]; then
          echo "❌ ALB do autoatendimento ainda não está pronto"
          exit 1
        fi

        echo "🌐 ALB URL: http://$ALB_URL"

        # Tentar por 5 minutos
        for i in {1..10}; do
          if curl -f --max-time 30 -s "http://$ALB_URL/actuator/health" | grep -q "UP"; then
            echo "✅ Autoatendimento health check OK!"
            break
          else
            echo "⏳ Tentativa $i/10 - Aguardando autoatendimento ficar pronto..."
            sleep 30
          fi

          if [ $i -eq 10 ]; then
            echo "❌ Autoatendimento não respondeu após 5 minutos"
            exit 1
          fi
        done

    - name: Health Check - Pagamento
      run: |
        echo "🔍 Testando health check do Pagamento..."
        ALB_URL=$(kubectl get ingress pagamento-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        if [ -z "$ALB_URL" ]; then
          echo "❌ ALB do pagamento ainda não está pronto"
          exit 1
        fi

        echo "🌐 ALB URL: http://$ALB_URL"

        # Tentar por 5 minutos
        for i in {1..10}; do
          if curl -f --max-time 30 -s "http://$ALB_URL/actuator/health" | grep -q "UP"; then
            echo "✅ Pagamento health check OK!"
            break
          else
            echo "⏳ Tentativa $i/10 - Aguardando pagamento ficar pronto..."
            sleep 30
          fi

          if [ $i -eq 10 ]; then
            echo "❌ Pagamento não respondeu após 5 minutos"
            exit 1
          fi
        done

    - name: Resumo do Deploy
      run: |
        echo ""
        echo "🎉 Deploy realizado com sucesso!"
        echo ""
        echo "📋 URLs das aplicações:"
        AUTOATENDIMENTO_URL=$(kubectl get ingress autoatendimento-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "AGUARDANDO...")
        PAGAMENTO_URL=$(kubectl get ingress pagamento-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "AGUARDANDO...")

        echo "  🛒 Autoatendimento: http://$AUTOATENDIMENTO_URL"
        echo "  💳 Pagamento: http://$PAGAMENTO_URL"
        echo ""
        echo "✅ Todos os serviços estão respondendo corretamente!"