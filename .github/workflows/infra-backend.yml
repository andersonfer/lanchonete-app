name: Backend Terraform (S3 + DynamoDB)

on:
  push:
    branches: [main, feature/migracao_eks]
    paths:
      - 'infra/backend/**'
      - '.github/workflows/infra-backend.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: Criar Backend Terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init (sem backend)
        working-directory: ./infra/backend
        run: terraform init
      
      - name: Verificar formatação Terraform
        working-directory: ./infra/backend
        run: terraform fmt -check
      
      - name: Validar Terraform
        working-directory: ./infra/backend
        run: terraform validate
      
      - name: Verificar e importar recursos existentes
        working-directory: ./infra/backend
        run: |
          echo "🔍 Verificando recursos existentes..."
          
          # Verifica se o bucket S3 já existe no estado
          if ! terraform state show aws_s3_bucket.terraform_state 2>/dev/null; then
            if aws s3api head-bucket --bucket lanchonete-terraform-state 2>/dev/null; then
              echo "📥 Importando bucket S3 existente..."
              terraform import aws_s3_bucket.terraform_state lanchonete-terraform-state
            fi
          else
            echo "✅ Bucket S3 já está no estado"
          fi
          
          # Verifica se a criptografia do S3 já existe no estado
          if ! terraform state show aws_s3_bucket_server_side_encryption_configuration.terraform_state 2>/dev/null; then
            if aws s3api get-bucket-encryption --bucket lanchonete-terraform-state 2>/dev/null; then
              echo "📥 Importando configuração de criptografia S3..."
              terraform import aws_s3_bucket_server_side_encryption_configuration.terraform_state lanchonete-terraform-state
            fi
          else
            echo "✅ Configuração de criptografia S3 já está no estado"
          fi
          
          # Verifica se o public access block do S3 já existe no estado
          if ! terraform state show aws_s3_bucket_public_access_block.terraform_state 2>/dev/null; then
            if aws s3api get-public-access-block --bucket lanchonete-terraform-state 2>/dev/null; then
              echo "📥 Importando public access block S3..."
              terraform import aws_s3_bucket_public_access_block.terraform_state lanchonete-terraform-state
            fi
          else
            echo "✅ Public access block S3 já está no estado"
          fi
          
          # Verifica se a tabela DynamoDB já existe no estado
          if ! terraform state show aws_dynamodb_table.terraform_locks 2>/dev/null; then
            if aws dynamodb describe-table --table-name lanchonete-terraform-locks 2>/dev/null; then
              echo "📥 Importando tabela DynamoDB existente..."
              terraform import aws_dynamodb_table.terraform_locks lanchonete-terraform-locks
            fi
          else
            echo "✅ Tabela DynamoDB já está no estado"
          fi
          
          echo "✅ Verificação de recursos concluída"
      
      - name: Terraform Plan
        working-directory: ./infra/backend
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: ./infra/backend
        run: terraform apply -auto-approve tfplan
      
      - name: Salvar outputs
        working-directory: ./infra/backend
        run: |
          terraform output -json > backend-outputs.json
          cat backend-outputs.json
      
      - name: Upload outputs como artefato
        uses: actions/upload-artifact@v4
        with:
          name: backend-outputs
          path: infra/backend/backend-outputs.json
          retention-days: 7