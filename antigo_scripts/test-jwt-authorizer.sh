#!/bin/bash

# Script de teste para JWT Authorizer - ETAPA 3
# Tests all authorization scenarios

set -e

echo "üß™ TESTANDO JWT AUTHORIZER - ETAPA 3"
echo "===================================="

# Configura√ß√µes
API_BASE_URL="https://xxzm6g5y17.execute-api.us-east-1.amazonaws.com/v1"

echo ""
echo "üîë 1. OBTENDO TOKENS DE TESTE..."

# Obter token cliente
echo "   Obtendo token cliente..."
CUSTOMER_RESPONSE=$(curl -s -X POST "$API_BASE_URL/auth" \
  -H "Content-Type: application/json" \
  -d '{"cpf": "12345678901", "authType": "cliente"}')

CUSTOMER_TOKEN=$(echo "$CUSTOMER_RESPONSE" | jq -r '.token')

if [[ $CUSTOMER_TOKEN == "null" ]]; then
    echo "‚ùå Erro ao obter token cliente: $CUSTOMER_RESPONSE"
    exit 1
fi

echo "   ‚úÖ Token cliente obtido: ${CUSTOMER_TOKEN:0:50}..."

# Obter token an√¥nimo
echo "   Obtendo token an√¥nimo..."
ANON_RESPONSE=$(curl -s -X POST "$API_BASE_URL/auth" \
  -H "Content-Type: application/json" \
  -d '{"authType": "anonimo"}')

ANON_TOKEN=$(echo "$ANON_RESPONSE" | jq -r '.token')

if [[ $ANON_TOKEN == "null" ]]; then
    echo "‚ùå Erro ao obter token an√¥nimo: $ANON_RESPONSE"
    exit 1
fi

echo "   ‚úÖ Token an√¥nimo obtido: ${ANON_TOKEN:0:50}..."

echo ""
echo "üõ°Ô∏è 2. TESTANDO AUTORIZA√á√ÉO..."

# Teste 1: Token cliente v√°lido
echo ""
echo "   üìã Teste 1: Token cliente v√°lido ‚Üí GET /produtos/categoria/LANCHE"
RESPONSE1=$(curl -s -w "\n%{http_code}" -X GET "$API_BASE_URL/produtos/categoria/LANCHE" \
  -H "Authorization: Bearer $CUSTOMER_TOKEN")

HTTP_CODE1=$(echo "$RESPONSE1" | tail -n1)
BODY1=$(echo "$RESPONSE1" | head -n -1)

echo "   Status: $HTTP_CODE1"
echo "   Response: $BODY1" | jq . 2>/dev/null || echo "   Response: $BODY1"

if [[ $HTTP_CODE1 == "200" ]]; then
    echo "   ‚úÖ SUCESSO: Autoriza√ß√£o cliente funcionando"
else
    echo "   ‚ùå ERRO: Esperado 200, recebido $HTTP_CODE1"
fi

# Teste 2: Token an√¥nimo v√°lido
echo ""
echo "   üìã Teste 2: Token an√¥nimo v√°lido ‚Üí GET /clientes"
RESPONSE2=$(curl -s -w "\n%{http_code}" -X GET "$API_BASE_URL/clientes" \
  -H "Authorization: Bearer $ANON_TOKEN")

HTTP_CODE2=$(echo "$RESPONSE2" | tail -n1)
BODY2=$(echo "$RESPONSE2" | head -n -1)

echo "   Status: $HTTP_CODE2"
echo "   Response: $BODY2" | jq . 2>/dev/null || echo "   Response: $BODY2"

if [[ $HTTP_CODE2 == "200" ]]; then
    echo "   ‚úÖ SUCESSO: Autoriza√ß√£o an√¥nima funcionando"
else
    echo "   ‚ùå ERRO: Esperado 200, recebido $HTTP_CODE2"
fi

# Teste 3: Token inv√°lido
echo ""
echo "   üìã Teste 3: Token inv√°lido ‚Üí GET /pedidos"
RESPONSE3=$(curl -s -w "\n%{http_code}" -X GET "$API_BASE_URL/pedidos" \
  -H "Authorization: Bearer token-invalido")

HTTP_CODE3=$(echo "$RESPONSE3" | tail -n1)
BODY3=$(echo "$RESPONSE3" | head -n -1)

echo "   Status: $HTTP_CODE3"
echo "   Response: $BODY3"

if [[ $HTTP_CODE3 == "401" ]]; then
    echo "   ‚úÖ SUCESSO: Token inv√°lido rejeitado corretamente"
else
    echo "   ‚ùå ERRO: Esperado 401, recebido $HTTP_CODE3"
fi

# Teste 4: Sem token
echo ""
echo "   üìã Teste 4: Sem token ‚Üí GET /pedidos"
RESPONSE4=$(curl -s -w "\n%{http_code}" -X GET "$API_BASE_URL/pedidos")

HTTP_CODE4=$(echo "$RESPONSE4" | tail -n1)
BODY4=$(echo "$RESPONSE4" | head -n -1)

echo "   Status: $HTTP_CODE4"
echo "   Response: $BODY4"

if [[ $HTTP_CODE4 == "401" ]]; then
    echo "   ‚úÖ SUCESSO: Requisi√ß√£o sem token rejeitada corretamente"
else
    echo "   ‚ùå ERRO: Esperado 401, recebido $HTTP_CODE4"
fi

# Teste 5: Rota p√∫blica (auth) ainda acess√≠vel
echo ""
echo "   üìã Teste 5: Rota p√∫blica /auth ainda acess√≠vel"
RESPONSE5=$(curl -s -w "\n%{http_code}" -X POST "$API_BASE_URL/auth" \
  -H "Content-Type: application/json" \
  -d '{"tipoAuth": "anonimo"}')

HTTP_CODE5=$(echo "$RESPONSE5" | tail -n1)
BODY5=$(echo "$RESPONSE5" | head -n -1)

echo "   Status: $HTTP_CODE5"
echo "   Response: $BODY5" | jq -r '.authType' 2>/dev/null || echo "   Response: $BODY5"

if [[ $HTTP_CODE5 == "200" ]]; then
    echo "   ‚úÖ SUCESSO: Rota /auth p√∫blica funcionando"
else
    echo "   ‚ùå ERRO: Esperado 200, recebido $HTTP_CODE5"
fi

echo ""
echo "üéØ 3. VALIDANDO CONTEXT INJECTION..."

# Verificar se os dados do context est√£o sendo retornados no mock
echo "   Verificando dados do cliente no context..."
CLIENT_DATA=$(echo "$BODY1" | jq -r '.headers.clienteId' 2>/dev/null)
if [[ $CLIENT_DATA == "1" ]]; then
    echo "   ‚úÖ Context injection cliente funcionando (clienteId: $CLIENT_DATA)"
else
    echo "   ‚ùå Context injection cliente n√£o funcionando"
fi

echo "   Verificando dados an√¥nimos no context..."  
ANON_DATA=$(echo "$BODY2" | jq -r '.headers.authType' 2>/dev/null)
if [[ $ANON_DATA == "anonimo" ]]; then
    echo "   ‚úÖ Context injection an√¥nimo funcionando (authType: $ANON_DATA)"
else
    echo "   ‚ùå Context injection an√¥nimo n√£o funcionando"
fi

echo ""
echo "üìä RESUMO DOS TESTES:"
echo "==================="

TOTAL_TESTS=5
PASSED_TESTS=0

[[ $HTTP_CODE1 == "200" ]] && ((PASSED_TESTS++))
[[ $HTTP_CODE2 == "200" ]] && ((PASSED_TESTS++))
[[ $HTTP_CODE3 == "401" ]] && ((PASSED_TESTS++))
[[ $HTTP_CODE4 == "401" ]] && ((PASSED_TESTS++))
[[ $HTTP_CODE5 == "200" ]] && ((PASSED_TESTS++))

echo "‚úÖ Testes passaram: $PASSED_TESTS/$TOTAL_TESTS"

if [[ $PASSED_TESTS == $TOTAL_TESTS ]]; then
    echo "üéâ TODOS OS TESTES PASSARAM! JWT Authorizer funcionando perfeitamente."
    exit 0
else
    echo "‚ùå Alguns testes falharam. Verifique a configura√ß√£o."
    exit 1
fi