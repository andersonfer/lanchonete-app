# Plano de Migração: Tarefas Restantes

## Status Atual vs Desejado

### ✅ JÁ IMPLEMENTADO:
- ✅ Separação API/Controller (contratos vs implementações)
- ✅ Estrutura básica com /entidades/, /casosdeuso/, /interfaces/
- ✅ Controllers implementando interfaces API
- ✅ Renomeação Repositórios → Gateways (pacote /gateways/ criado)
- ✅ Reorganização: /api/ e /controllers/ independentes, DTOs em /controllers/dto/

### 🚧 TAREFAS RESTANTES:

### **1. CRIAR VALUE OBJECTS**
**Status:** Pendente
**Descrição:** Criar classes para encapsular validações
**Arquivos a criar:**
- `/entidades/shared/Cpf.java`
- `/entidades/shared/Email.java`
- `/entidades/produto/Preco.java`
- `/entidades/pedido/NumeroPedido.java`

**Arquivos a modificar:**
- `Cliente.java` - usar Cpf e Email
- `Produto.java` - usar Preco  
- `Pedido.java` - usar NumeroPedido
- Todos os DTOs, gateways e use cases relacionados

---

### **2. LIMPAR USE CASES**
**Status:** Pendente
**Descrição:** Remover anotações Spring dos use cases
**Localização:** Manter em `/casosdeuso/` (sem mover)
**Nomes:** Manter atuais (sem renomear)

**Classes a modificar:**
- `CadastrarCliente.java` - remover @Service, @Transactional
- `IdentificarCliente.java` - remover @Service
- `CriarProduto.java` - remover @Service, @Transactional
- `EditarProduto.java` - remover @Service, @Transactional
- `RemoverProduto.java` - remover @Service, @Transactional
- `BuscarProdutosPorCategoria.java` - remover @Service
- `RealizarPedido.java` - remover @Service, @Transactional
- `ListarPedidos.java` - remover @Service

---

### **3. CRIAR APPLICATION SERVICES**
**Status:** Pendente
**Descrição:** Camada de orquestração na Interface Adapters
**Localização:** Expandir `/aplicacao/` existente

**Arquivos a criar:**
- `/aplicacao/ClienteApplicationService.java`
- `/aplicacao/ProdutoApplicationService.java`
- `/aplicacao/PedidoApplicationService.java`

**Arquivos a modificar:**
- Todos os controllers (injetar App Service ao invés de Use Cases)
- Configurações (adicionar beans de App Services)
- App Services injetam Gateways ao invés de Use Cases injetarem diretamente

---

### **4. LIMPAR DEPENDÊNCIAS DAS ENTITIES**
**Status:** Pendente
**Descrição:** Remover dependências externas das entities

**Classes a modificar:**
- `Cliente.java` - remover import Utils.validarCpf
- `Produto.java` - revisar dependências Lombok
- `Pedido.java` - revisar dependências Lombok  
- `ItemPedido.java` - revisar dependências Lombok

---

## 🎯 ESTRUTURA FINAL ESPERADA

```
br.com.lanchonete.autoatendimento
├── entidades/                    # Mantém atual + Value Objects
│   ├── cliente/
│   │   └── Cliente.java         # ✅ Limpar dependencies
│   ├── produto/
│   │   ├── Produto.java         # ✅ Limpar dependencies  
│   │   └── Preco.java           # 📦 NOVO Value Object
│   ├── pedido/
│   │   ├── Pedido.java          # ✅ Limpar dependencies
│   │   ├── ItemPedido.java      # ✅ Limpar dependencies
│   │   └── NumeroPedido.java    # 📦 NOVO Value Object
│   └── shared/
│       ├── Cpf.java             # 📦 NOVO Value Object
│       └── Email.java           # 📦 NOVO Value Object
├── casosdeuso/                   # ✅ Limpar anotações Spring
├── aplicacao/                    # ✅ EXPANDIR - Application Services + exceções
├── api/                          # ✅ JÁ CRIADO - Contratos REST
├── controllers/                  # ✅ JÁ REORGANIZADO - Implementações + DTOs
├── gateways/                     # ✅ JÁ CRIADO - Implementações JDBC
├── frameworks/                   # Mantém atual (config/util)
└── interfaces/                   # ✅ JÁ ATUALIZADO - Interfaces Gateway
```

## ⚡ ORDEM DE EXECUÇÃO RECOMENDADA

1. **Value Objects** - Base para todas as outras mudanças
2. **Limpar Dependencies** - Remove dependências externas  
3. **Limpar Use Cases** - Remove anotações Spring
4. **Application Services** - Camada de orquestração