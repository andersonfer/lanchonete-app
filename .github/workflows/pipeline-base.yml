name: "Pipeline 1 - Base Infrastructure"

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: "1.5.0"

jobs:
  base-infra:
    name: "Deploy Base Infrastructure"
    runs-on: ubuntu-latest

    outputs:
      ecr_autoatendimento: ${{ steps.ecr_outputs.outputs.autoatendimento_url }}
      ecr_pagamento: ${{ steps.ecr_outputs.outputs.pagamento_url }}
      rds_endpoint: ${{ steps.rds_outputs.outputs.endpoint }}

    steps:
      - name: "üì• Checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "üîê Configurar credenciais AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "‚öôÔ∏è Configurar Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: "üß™ Validar credenciais AWS"
        run: |
          echo "Validando credenciais AWS..."
          aws sts get-caller-identity

      # Backend Infrastructure (S3 + DynamoDB)
      - name: "üóÑÔ∏è Deploy Backend Infrastructure"
        id: backend
        working-directory: infra/backend
        run: |
          echo "Verificando e criando S3 bucket e DynamoDB para estado do Terraform..."

          # Verificar se os recursos j√° existem
          BUCKET_EXISTS=$(aws s3api head-bucket --bucket lanchonete-terraform-state-poc 2>&1 || true)
          TABLE_EXISTS=$(aws dynamodb describe-table --table-name lanchonete-terraform-locks 2>&1 || true)

          terraform init

          # Se os recursos j√° existem, importar ao inv√©s de criar
          if [[ ! "$BUCKET_EXISTS" =~ "Not Found" ]] && [[ ! "$BUCKET_EXISTS" =~ "404" ]]; then
            echo "Bucket S3 j√° existe, importando para o Terraform state..."
            terraform import aws_s3_bucket.terraform_state lanchonete-terraform-state-poc || true
          fi

          if [[ ! "$TABLE_EXISTS" =~ "ResourceNotFoundException" ]]; then
            echo "Tabela DynamoDB j√° existe, importando para o Terraform state..."
            terraform import aws_dynamodb_table.terraform_locks lanchonete-terraform-locks || true
          fi

          terraform validate
          terraform plan -out=tfplan
          terraform apply tfplan

      # ECR Repositories
      - name: "üê≥ Deploy Reposit√≥rios ECR"
        id: ecr
        working-directory: infra/ecr
        run: |
          echo "Verificando e criando reposit√≥rios ECR..."
          terraform init

          # Verificar o que j√° est√° no state
          echo "Estado atual do Terraform:"
          terraform state list || echo "State vazio"

          # Verificar se reposit√≥rios existem na AWS e importar apenas se n√£o est√£o no state
          if ! terraform state list | grep -q 'aws_ecr_repository.repos\[0\]'; then
            if aws ecr describe-repositories --repository-names lanchonete-autoatendimento >/dev/null 2>&1; then
              echo "Importando reposit√≥rio autoatendimento..."
              terraform import 'aws_ecr_repository.repos[0]' lanchonete-autoatendimento || true
            fi
          fi

          if ! terraform state list | grep -q 'aws_ecr_repository.repos\[1\]'; then
            if aws ecr describe-repositories --repository-names lanchonete-pagamento >/dev/null 2>&1; then
              echo "Importando reposit√≥rio pagamento..."
              terraform import 'aws_ecr_repository.repos[1]' lanchonete-pagamento || true
            fi
          fi

          # Aplicar mudan√ßas
          terraform validate
          terraform apply -auto-approve

      - name: "üì§ Exportar URLs do ECR"
        id: ecr_outputs
        working-directory: infra/ecr
        run: |
          AUTOATENDIMENTO_URL=$(terraform output -raw ecr_autoatendimento_url)
          PAGAMENTO_URL=$(terraform output -raw ecr_pagamento_url)
          echo "autoatendimento_url=$AUTOATENDIMENTO_URL" >> $GITHUB_OUTPUT
          echo "pagamento_url=$PAGAMENTO_URL" >> $GITHUB_OUTPUT
          echo "URLs do ECR exportadas com sucesso"

      # RDS Database
      - name: "üíæ Deploy Banco de Dados RDS"
        id: rds
        working-directory: infra/database
        timeout-minutes: 15
        run: |
          echo "Verificando e criando banco MySQL no RDS..."
          terraform init

          # Tentar importar recursos existentes - falha silenciosamente se j√° est√£o no state
          echo "Verificando recursos RDS existentes..."
          terraform import aws_db_instance.mysql lanchonete-mysql 2>/dev/null || true
          terraform import aws_db_subnet_group.mysql_subnet_group lanchonete-db-subnet-group 2>/dev/null || true
          terraform import aws_security_group.rds_mysql lanchonete-rds-security-group 2>/dev/null || true

          # Aplicar com auto-approve
          terraform validate
          terraform apply -auto-approve -refresh=true || {
            echo "Primeira tentativa falhou, tentando refresh e apply novamente..."
            terraform refresh
            terraform apply -auto-approve
          }

      - name: "üì§ Exportar Endpoint do RDS"
        id: rds_outputs
        working-directory: infra/database
        run: |
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
          echo "endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "Endpoint do RDS: $RDS_ENDPOINT"

      - name: "üîê Armazenar senha do RDS no Parameter Store"
        working-directory: infra/database
        run: |
          RDS_PASSWORD=$(terraform output -raw db_password)
          aws ssm put-parameter \
            --name "/lanchonete/rds/password" \
            --value "$RDS_PASSWORD" \
            --type "SecureString" \
            --overwrite \
            --description "Senha do RDS para banco lanchonete"
          echo "Senha do RDS armazenada no Parameter Store"

      # Smoke Tests
      - name: "üß™ Smoke Test - Verificar Backend S3"
        run: |
          echo "Verificando backend S3..."
          aws s3 ls s3://lanchonete-terraform-state-poc/ || exit 1
          echo "‚úÖ Backend S3 est√° acess√≠vel"

      - name: "üß™ Smoke Test - Verificar Reposit√≥rios ECR"
        run: |
          echo "Verificando reposit√≥rios ECR..."
          aws ecr describe-repositories --repository-names lanchonete-autoatendimento
          aws ecr describe-repositories --repository-names lanchonete-pagamento
          echo "‚úÖ Reposit√≥rios ECR criados com sucesso"

      - name: "üß™ Smoke Test - Verificar Banco RDS"
        run: |
          echo "Verificando status do banco RDS..."
          DB_STATUS=$(aws rds describe-db-instances \
            --db-instance-identifier lanchonete-mysql \
            --query 'DBInstances[0].DBInstanceStatus' \
            --output text)

          echo "Status do banco: $DB_STATUS"

          if [[ "$DB_STATUS" == "available" ]]; then
            echo "‚úÖ Banco RDS est√° dispon√≠vel"
          elif [[ "$DB_STATUS" == "creating" ]] || [[ "$DB_STATUS" == "backing-up" ]] || [[ "$DB_STATUS" == "modifying" ]]; then
            echo "‚ö†Ô∏è Banco RDS ainda est√° sendo criado (status: $DB_STATUS)"
            echo "Isso √© normal durante o deploy inicial"
          else
            echo "‚ùå Status inesperado do banco: $DB_STATUS"
            exit 1
          fi

          # Verificar se endpoint existe
          RDS_ENDPOINT="${{ steps.rds_outputs.outputs.endpoint }}"
          if [[ -n "$RDS_ENDPOINT" ]]; then
            echo "‚úÖ Endpoint do RDS configurado: $RDS_ENDPOINT"
          else
            echo "‚ùå Endpoint do RDS n√£o encontrado"
            exit 1
          fi

      - name: "üß™ Smoke Test - Verificar Parameter Store"
        run: |
          echo "Verificando senha do RDS no Parameter Store..."
          aws ssm describe-parameters \
            --filters "Key=Name,Values=/lanchonete/rds/password" \
            --query 'Parameters[0].Name' \
            --output text | grep -q "/lanchonete/rds/password" || exit 1
          echo "‚úÖ Senha do RDS armazenada com sucesso no Parameter Store"

      - name: "üìä Resumo do Pipeline"
        if: always()
        run: |
          echo "=== RESUMO DO PIPELINE BASE INFRASTRUCTURE ==="
          echo "‚úÖ Backend: S3 + DynamoDB implantados"
          echo "‚úÖ ECR: Reposit√≥rios criados"
          echo "‚úÖ RDS: Banco MySQL implantado"
          echo "‚úÖ Secrets: Senha do RDS armazenada no Parameter Store"
          echo "============================================="
          echo "ECR Autoatendimento: ${{ steps.ecr_outputs.outputs.autoatendimento_url }}"
          echo "ECR Pagamento: ${{ steps.ecr_outputs.outputs.pagamento_url }}"
          echo "Endpoint RDS: ${{ steps.rds_outputs.outputs.endpoint }}"