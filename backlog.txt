# BACKLOG - TECH CHALLENGE FASE 2 - ITEM 1

## ENTREG√ÅVEIS DO ITEM 1 (Checklist de Progresso)

### a. Alterar/criar as APIs:

#### i. Checkout Pedido
- [x] API que recebe produtos solicitados
- [x] Retorna identifica√ß√£o do pedido (ID)
- [x] Integra com fluxo de pagamento (statusPagamento: PENDENTE)

#### ii. Consultar status de pagamento pedido
- [x] API que informa se pagamento foi aprovado ou n√£o
- [x] Busca por ID do pedido

#### iii. Webhook para receber confirma√ß√£o de pagamento
- [x] Endpoint para receber notifica√ß√µes externas
- [x] Processa pagamento aprovado ou recusado
- [x] Implementa√ß√£o clara quanto ao Webhook

#### iv. Lista de pedidos com ordena√ß√£o espec√≠fica
- [ ] Retorna pedidos com suas descri√ß√µes
- [ ] Ordena√ß√£o: Pronto > Em Prepara√ß√£o > Recebido
- [ ] Pedidos mais antigos primeiro, mais novos depois
- [ ] Pedidos com status Finalizado N√ÉO aparecem na lista

#### v. Atualizar status do pedido
- [ ] API para atualiza√ß√£o de status
- [ ] Fluxo completo do pedido implementado
- [ ] Informa√ß√£o utilizada pela cozinha
- [ ] Garantia que nenhum pedido seja perdido
- [ ] Cozinha pode iniciar prepara√ß√£o ap√≥s pagamento

#### vi. Integra√ß√£o com Mercado Pago (OPCIONAL - MOCK)
- [ ] Mock da parte de pagamentos implementado
- [ ] Simula√ß√£o de QRCode para pagamento
- [ ] Integra√ß√£o com WebHook para capturar pagamentos

---

## BACKLOG DE TAREFAS

### üî¥ PRIORIDADE ALTA - FUNDA√á√ÉO ‚úÖ CONCLU√çDA

**1. Criar enum StatusPagamento no dom√≠nio**
   - Status: [x] Conclu√≠do
   - Descri√ß√£o: Implementar enum StatusPagamento no pacote dominio/modelo
   - Inclui: Estados PENDENTE, APROVADO, REJEITADO

**2. Atualizar entidade Pedido para incluir StatusPagamento**
   - Status: [x] Conclu√≠do
   - Descri√ß√£o: Adicionar campo StatusPagamento na entidade Pedido
   - Inclui: M√©todos para manipular status de pagamento

**3. Ajustar PedidoGatewayJDBC para persistir StatusPagamento**
   - Status: [x] Conclu√≠do
   - Descri√ß√£o: Atualizar queries para incluir campo status_pagamento
   - Inclui: Mapeamento de enum StatusPagamento

**4. Criar estrutura do projeto mock-mercado-pago**
   - Status: [ ] Pendente
   - Descri√ß√£o: Novo projeto Spring Boot separado
   - Inclui: Estrutura b√°sica, application.yml, Dockerfile

### üü° PRIORIDADE M√âDIA - APIs CORE ‚úÖ CONCLU√çDA

**5. Implementar APIs de checkout com retorno de pedidoId**
   - Status: [x] Conclu√≠do
   - Descri√ß√£o: Atualizar endpoint de checkout
   - Inclui: Inicializa√ß√£o com StatusPagamento.PENDENTE

**6. Implementar API de consulta de status de pagamento**
   - Status: [x] Conclu√≠do
   - Descri√ß√£o: Nova API GET /pedidos/{id}/pagamento/status
   - Inclui: DTO de resposta, valida√ß√µes

**7. Implementar webhook para receber confirma√ß√£o de pagamento**
   - Status: [x] Conclu√≠do
   - Descri√ß√£o: Nova API POST /webhook/pagamento
   - Inclui: Atualiza√ß√£o de StatusPagamento (APROVADO/REJEITADO)

**8. Implementar mock do Mercado Pago com comportamento aleat√≥rio**
   - Status: [ ] Pendente
   - Descri√ß√£o: APIs no projeto mock-mercado-pago
   - Inclui: Simula√ß√£o de processamento, chamada de webhook

**9. Atualizar API de listagem de pedidos com regras de ordena√ß√£o**
   - Status: [ ] Pendente - PR√ìXIMA PRIORIDADE
   - Descri√ß√£o: Modificar ordena√ß√£o conforme requisitos
   - Inclui: Query SQL atualizada, exclus√£o de Finalizados

**10. Implementar APIs para atualiza√ß√£o de status do pedido (cozinha)**
    - Status: [ ] Pendente
    - Descri√ß√£o: APIs para cozinha gerenciar status
    - Inclui: GET /pedidos/cozinha, PUT /pedidos/{id}/status

### üü¢ PRIORIDADE BAIXA - INFRAESTRUTURA E FINALIZA√á√ÉO

**11. Configurar Docker Compose para ambos os projetos**
    - Status: [ ] Pendente
    - Descri√ß√£o: docker-compose.yml na raiz
    - Inclui: Networks, vari√°veis de ambiente

**12. Criar testes integrados para fluxo completo de pagamento**
    - Status: [ ] Pendente
    - Descri√ß√£o: Testes E2E do fluxo checkout ‚Üí webhook ‚Üí status
    - Inclui: Testes de aprova√ß√£o e rejei√ß√£o

**13. Atualizar documenta√ß√£o e collection de APIs**
    - Status: [ ] Pendente
    - Descri√ß√£o: README.md, Swagger, collection Postman
    - Inclui: Instru√ß√µes Docker, exemplos de uso

---

## PROGRESSO ATUAL (08/07/2025)

### ‚úÖ CONCLU√çDO:
- **Funda√ß√£o StatusPagamento**: enum, entidade, persist√™ncia ‚úÖ
- **API Checkout**: integra√ß√£o com statusPagamento ‚úÖ
- **API Consulta Status**: endpoint GET /pedidos/{id}/pagamento/status ‚úÖ
- **Webhook de Pagamento**: endpoint POST /webhook/pagamento ‚úÖ
- **Testes**: 36+ testes passando (unit√°rios + integra√ß√£o + E2E)
- **Valida√ß√£o Manual**: webhook testado em aplica√ß√£o real

### üîÑ EM ANDAMENTO:
- Nenhuma tarefa em andamento

### üéØ PR√ìXIMOS PASSOS RECOMENDADOS:

1. **IMEDIATO** - Atualizar listagem de pedidos com ordena√ß√£o (tarefa 9)
2. **SEQUENCIAL** - APIs para cozinha gerenciar status (tarefa 10)
3. **PARALELO** - Criar mock Mercado Pago (tarefa 8)

---

## ESTIMATIVA DE EXECU√á√ÉO (REVISADA)
- ‚úÖ Funda√ß√£o (1-3): ~2-3 dias - **CONCLU√çDO**
- ‚úÖ APIs Core (5-7): ~2-3 dias - **CONCLU√çDO**
- üîÑ Complementares (8-10): ~2-3 dias - **EM ANDAMENTO**
- ‚è≥ Finaliza√ß√£o (11-13): ~1-2 dias
- **Total estimado**: 6-9 dias de desenvolvimento (**~60% conclu√≠do**)

---

## ANOTA√á√ïES
- Usar StatusPedido e StatusPagamento separados ‚úÖ
- StatusPagamento como enum dentro da entidade Pedido ‚úÖ
- Mock com 80% aprova√ß√£o, 20% rejei√ß√£o aleat√≥ria
- Docker Compose gerencia ambos os projetos

---

Data de cria√ß√£o: 16/06/2025
√öltima atualiza√ß√£o: 08/07/2025