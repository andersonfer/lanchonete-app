name: 04 - Deploy Applications (Build + Docker + K8s)

on:
  push:
    branches: [ feature/pipeline_rds ]
    paths:
      - 'app/**'
      - 'k8s/**'
      - 'infra/04-applications/**'
      - '.github/workflows/04-infra-applications.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'k8s/**'
      - 'infra/04-applications/**'
      - '.github/workflows/04-infra-applications.yml'
  workflow_dispatch:

jobs:
  deploy-applications:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Setup Maven
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Get Infrastructure Outputs
      run: |
        # Obter outputs da infraestrutura Kubernetes
        cd infra/02-kubernetes
        echo "ECR_REGISTRY_URL=$(terraform output -raw registry_url)" >> $GITHUB_ENV
        echo "ECR_AUTOATENDIMENTO_REPO=$(terraform output -raw repositorio_autoatendimento)" >> $GITHUB_ENV
        echo "ECR_PAGAMENTO_REPO=$(terraform output -raw repositorio_pagamento)" >> $GITHUB_ENV
        echo "EKS_CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV

        # Obter outputs da infraestrutura de autenticação
        cd ../03-auth/cognito
        echo "COGNITO_USER_POOL_ID=$(terraform output -raw user_pool_id)" >> $GITHUB_ENV
        echo "COGNITO_CLIENT_ID=$(terraform output -raw user_pool_client_id)" >> $GITHUB_ENV

        cd ../api-gateway
        echo "API_GATEWAY_ENDPOINT=$(terraform output -raw api_gateway_endpoint)" >> $GITHUB_ENV

        # Obter RDS outputs
        cd ../../01-database
        echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV

    - name: Build Autoatendimento Application
      run: |
        cd app/autoatendimento
        echo "Building autoatendimento application..."
        mvn clean package -DskipTests
        ls -la target/

    - name: Build Pagamento Application
      run: |
        cd app/pagamento
        echo "Building pagamento application..."
        mvn clean package -DskipTests
        ls -la target/

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY_URL

    - name: Build and Push Autoatendimento Docker Image
      run: |
        cd app/autoatendimento

        # Build da imagem Docker
        docker build -t $ECR_AUTOATENDIMENTO_REPO:latest .
        docker build -t $ECR_AUTOATENDIMENTO_REPO:$GITHUB_SHA .

        # Push para ECR
        docker push $ECR_AUTOATENDIMENTO_REPO:latest
        docker push $ECR_AUTOATENDIMENTO_REPO:$GITHUB_SHA

        echo "Autoatendimento image pushed: $ECR_AUTOATENDIMENTO_REPO:$GITHUB_SHA"

    - name: Build and Push Pagamento Docker Image
      run: |
        cd app/pagamento

        # Build da imagem Docker
        docker build -t $ECR_PAGAMENTO_REPO:latest .
        docker build -t $ECR_PAGAMENTO_REPO:$GITHUB_SHA .

        # Push para ECR
        docker push $ECR_PAGAMENTO_REPO:latest
        docker push $ECR_PAGAMENTO_REPO:$GITHUB_SHA

        echo "Pagamento image pushed: $ECR_PAGAMENTO_REPO:$GITHUB_SHA"

    - name: Deploy ALB Controller Infrastructure
      run: |
        cd infra/04-applications
        terraform init
        terraform plan
        terraform apply -auto-approve
      timeout-minutes: 15

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-east-1 --name $EKS_CLUSTER_NAME

    - name: Update Kubernetes Manifests
      run: |
        # Substituir placeholders nos manifests com valores reais
        find k8s -name "*.yaml" -type f -exec sed -i "s|ACCOUNT_ID|339712817738|g" {} \;
        find k8s -name "*.yaml" -type f -exec sed -i "s|ECR_REGISTRY|$ECR_REGISTRY_URL|g" {} \;
        find k8s -name "*.yaml" -type f -exec sed -i "s|RDS_ENDPOINT|$RDS_ENDPOINT|g" {} \;

        echo "Updated manifests with dynamic values"

    - name: Create Database Secrets
      run: |
        # Criar secrets do RDS no Kubernetes
        kubectl create secret generic mysql-secret -n lanchonete \
          --from-literal=SPRING_DATASOURCE_URL="jdbc:mysql://$RDS_ENDPOINT:3306/lanchonete?useSSL=false&serverTimezone=UTC" \
          --from-literal=SPRING_DATASOURCE_USERNAME=admin \
          --from-literal=SPRING_DATASOURCE_PASSWORD=123456789 \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy Global Resources
      run: |
        # Aplicar recursos globais
        kubectl apply -f k8s/global/

    - name: Deploy Autoatendimento
      run: |
        # Deploy do serviço de autoatendimento
        kubectl apply -f k8s/autoatendimento/

        # Aguardar deployment ficar ready
        kubectl rollout status deployment/autoatendimento -n lanchonete --timeout=300s

    - name: Deploy Pagamento
      run: |
        # Deploy do serviço de pagamento
        kubectl apply -f k8s/pagamento/

        # Aguardar deployment ficar ready
        kubectl rollout status deployment/pagamento -n lanchonete --timeout=300s

    - name: Wait for LoadBalancers
      run: |
        echo "Aguardando Load Balancers ficarem disponíveis..."

        # Aguardar ingresses ficarem com endereços
        timeout 300 bash -c 'until kubectl get ingress -n lanchonete -o jsonpath="{.items[*].status.loadBalancer.ingress[*].hostname}" | grep -q amazonaws.com; do echo "Waiting for ingress..."; sleep 15; done'

    - name: Health Check - Applications
      run: |
        echo "Verificando health das aplicações..."

        # Listar pods
        kubectl get pods -n lanchonete

        # Verificar ingresses
        kubectl get ingress -n lanchonete -o wide

        # Obter URLs dos ALBs
        AUTOATENDIMENTO_URL=$(kubectl get ingress autoatendimento-ingress -n lanchonete -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "not-ready")
        PAGAMENTO_URL=$(kubectl get ingress pagamento-ingress -n lanchonete -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "not-ready")

        echo "Autoatendimento ALB: $AUTOATENDIMENTO_URL"
        echo "Pagamento ALB: $PAGAMENTO_URL"

        # Health check básico se ALBs estiverem prontos
        if [ "$AUTOATENDIMENTO_URL" != "not-ready" ] && [ "$AUTOATENDIMENTO_URL" != "" ]; then
          echo "Testing autoatendimento health..."
          curl -f "http://$AUTOATENDIMENTO_URL/actuator/health" || echo "Health check failed - may need more time"
        fi

        if [ "$PAGAMENTO_URL" != "not-ready" ] && [ "$PAGAMENTO_URL" != "" ]; then
          echo "Testing pagamento health..."
          curl -f "http://$PAGAMENTO_URL/actuator/health" || echo "Health check failed - may need more time"
        fi

    - name: Integration Test - End-to-End
      run: |
        echo "Executando teste de integração end-to-end..."

        # Por enquanto, apenas verificar se os recursos foram criados
        echo "✅ Aplicações deployadas com sucesso"
        echo "⚠️ Testes end-to-end podem ser executados após ALBs ficarem totalmente disponíveis"

        # Mostrar status final
        kubectl get all -n lanchonete

    - name: Export Application URLs
      run: |
        # Exportar URLs para uso posterior
        AUTOATENDIMENTO_URL=$(kubectl get ingress autoatendimento-ingress -n lanchonete -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")
        PAGAMENTO_URL=$(kubectl get ingress pagamento-ingress -n lanchonete -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")

        echo "AUTOATENDIMENTO_ALB_URL=http://$AUTOATENDIMENTO_URL" >> $GITHUB_ENV
        echo "PAGAMENTO_ALB_URL=http://$PAGAMENTO_URL" >> $GITHUB_ENV

        echo "Applications deployment completed successfully"
        echo "Autoatendimento URL: http://$AUTOATENDIMENTO_URL"
        echo "Pagamento URL: http://$PAGAMENTO_URL"