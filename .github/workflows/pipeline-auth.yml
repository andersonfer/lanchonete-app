name: "Pipeline 3 - Authentication"

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
  workflow_run:
    workflows: ["Pipeline 1 - Base Infrastructure"]
    types: [completed]

env:
  AWS_REGION: us-east-1
  TF_VERSION: "1.5.0"

jobs:
  check-base:
    name: "Verificar Pipeline Base"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: "‚úÖ Verificar status do Pipeline Base"
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Pipeline Base completado com sucesso"
          else
            echo "Execu√ß√£o manual ou via PR"
          fi
          echo "should_run=true" >> $GITHUB_OUTPUT

  auth-infra:
    name: "Deploy Authentication Infrastructure"
    runs-on: ubuntu-latest
    needs: check-base
    if: needs.check-base.outputs.should_run == 'true'

    outputs:
      api_gateway_url: ${{ steps.api_outputs.outputs.api_url }}
      user_pool_id: ${{ steps.cognito_outputs.outputs.user_pool_id }}

    steps:
      - name: "üì• Checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "üîê Configurar credenciais AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "‚öôÔ∏è Configurar Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: "‚òï Setup Java 17"
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'


      - name: "üß™ Validar credenciais AWS"
        run: |
          echo "Validando credenciais AWS..."
          aws sts get-caller-identity

      - name: "üîç Verificar pr√©-requisitos"
        run: |
          echo "Verificando se a infraestrutura base existe..."

          # Verificar S3 backend
          aws s3 ls s3://lanchonete-terraform-state-poc/ >/dev/null 2>&1 || {
            echo "‚ùå Backend S3 n√£o encontrado. Execute o Pipeline Base primeiro."
            exit 1
          }
          echo "‚úÖ Backend S3 encontrado"

          # Verificar ECR (necess√°rio para obter URLs dos ALBs depois)
          aws ecr describe-repositories --repository-names lanchonete-autoatendimento >/dev/null 2>&1 || {
            echo "‚ùå Reposit√≥rios ECR n√£o encontrados. Execute o Pipeline Base primeiro."
            exit 1
          }
          echo "‚úÖ Reposit√≥rios ECR encontrados"

      # Build Lambda Java
      - name: "üî® Build Lambda de Autentica√ß√£o"
        working-directory: infra/lambda
        run: |
          echo "Compilando Lambda Java de autentica√ß√£o..."

          # Executar Maven para build
          mvn clean package

          # Verificar se o JAR foi criado
          if [[ -f "target/lanchonete-auth-lambda-1.0.0.jar" ]]; then
            echo "‚úÖ Lambda JAR criado com sucesso"
            ls -lh target/lanchonete-auth-lambda-1.0.0.jar
          else
            echo "‚ùå Falha ao criar Lambda JAR"
            exit 1
          fi

      # Cognito User Pool
      - name: "üîê Deploy Cognito User Pool"
        id: cognito
        working-directory: infra/auth
        timeout-minutes: 5
        run: |
          echo "Criando Cognito User Pool..."
          terraform init
          terraform validate
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: "üì§ Exportar dados do Cognito"
        id: cognito_outputs
        working-directory: infra/auth
        run: |
          USER_POOL_ID=$(terraform output -raw user_pool_id)
          USER_POOL_CLIENT_ID=$(terraform output -raw user_pool_client_id)
          echo "user_pool_id=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "user_pool_client_id=$USER_POOL_CLIENT_ID" >> $GITHUB_OUTPUT
          echo "Cognito User Pool ID: $USER_POOL_ID"
          echo "Cognito Client ID: $USER_POOL_CLIENT_ID"

      # Lambda Function
      - name: "‚ö° Deploy Lambda Function"
        id: lambda
        working-directory: infra/lambda
        timeout-minutes: 5
        run: |
          echo "Fazendo deploy da Lambda de autentica√ß√£o..."
          terraform init
          terraform validate
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: "üì§ Exportar ARN da Lambda"
        id: lambda_outputs
        working-directory: infra/lambda
        run: |
          LAMBDA_ARN=$(terraform output -raw lambda_function_arn)
          LAMBDA_NAME=$(terraform output -raw lambda_function_name)
          echo "lambda_arn=$LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT
          echo "Lambda ARN: $LAMBDA_ARN"
          echo "Lambda Name: $LAMBDA_NAME"

      # API Gateway
      - name: "üåê Deploy API Gateway"
        id: api_gateway
        working-directory: infra/api-gateway
        timeout-minutes: 5
        run: |
          echo "Criando API Gateway com Cognito Authorizer..."
          terraform init
          terraform validate
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: "üì§ Exportar URL do API Gateway"
        id: api_outputs
        working-directory: infra/api-gateway
        run: |
          API_URL=$(terraform output -raw api_gateway_endpoint)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "API Gateway URL: $API_URL"

      # Smoke Tests
      - name: "üß™ Smoke Test - Verificar Cognito User Pool"
        run: |
          echo "Verificando Cognito User Pool..."
          USER_POOL_STATUS=$(aws cognito-idp describe-user-pool \
            --user-pool-id ${{ steps.cognito_outputs.outputs.user_pool_id }} \
            --query 'UserPool.Status' \
            --output text)

          if [[ "$USER_POOL_STATUS" == "Enabled" ]]; then
            echo "‚úÖ Cognito User Pool est√° ativo"
          else
            echo "‚ùå Status inesperado do User Pool: $USER_POOL_STATUS"
            exit 1
          fi

      - name: "üß™ Smoke Test - Verificar Lambda Function"
        run: |
          echo "Verificando Lambda de autentica√ß√£o..."
          LAMBDA_STATE=$(aws lambda get-function \
            --function-name ${{ steps.lambda_outputs.outputs.lambda_name }} \
            --query 'Configuration.State' \
            --output text)

          if [[ "$LAMBDA_STATE" == "Active" ]]; then
            echo "‚úÖ Lambda Function est√° ativa"
          else
            echo "‚ùå Status inesperado da Lambda: $LAMBDA_STATE"
            exit 1
          fi

      - name: "üß™ Smoke Test - Verificar API Gateway"
        run: |
          echo "Verificando API Gateway..."
          API_URL="${{ steps.api_outputs.outputs.api_url }}"

          # Testar endpoint de health (deve retornar sem autentica√ß√£o)
          echo "Testando endpoint de health..."
          HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" ${API_URL}/health || true)

          if [[ "$HEALTH_RESPONSE" == "200" ]]; then
            echo "‚úÖ API Gateway health endpoint respondendo"
          else
            echo "‚ö†Ô∏è Health endpoint retornou status: $HEALTH_RESPONSE"
            echo "Isso √© esperado se o endpoint n√£o existe ainda"
          fi

      - name: "üß™ Smoke Test - Testar Autentica√ß√£o An√¥nima"
        run: |
          echo "Testando autentica√ß√£o an√¥nima via Lambda..."
          API_URL="${{ steps.api_outputs.outputs.api_url }}"

          # Testar autentica√ß√£o an√¥nima
          echo "Enviando request para autentica√ß√£o an√¥nima..."
          AUTH_RESPONSE=$(curl -s -X POST ${API_URL}/v1/auth/identificar \
            -H "Content-Type: application/json" \
            -d '{"cpf": null}' || true)

          if echo "$AUTH_RESPONSE" | grep -q "token"; then
            echo "‚úÖ Autentica√ß√£o an√¥nima funcionando"
            echo "Response (primeiros 200 chars): ${AUTH_RESPONSE:0:200}..."
          else
            echo "‚ö†Ô∏è Resposta inesperada da autentica√ß√£o"
            echo "Response: $AUTH_RESPONSE"
            echo "Isso pode ser normal se os ALBs ainda n√£o est√£o configurados"
          fi

      - name: "üìä Resumo do Pipeline"
        if: always()
        run: |
          echo "=== RESUMO DO PIPELINE AUTHENTICATION ==="
          echo "‚úÖ Lambda: Build Java compilado com sucesso"
          echo "‚úÖ Cognito: User Pool criado e configurado"
          echo "‚úÖ Lambda: Function deployada e ativa"
          echo "‚úÖ API Gateway: Configurado com Cognito Authorizer"
          echo "========================================="
          echo "API Gateway URL: ${{ steps.api_outputs.outputs.api_url }}"
          echo "User Pool ID: ${{ steps.cognito_outputs.outputs.user_pool_id }}"
          echo "Lambda Function: ${{ steps.lambda_outputs.outputs.lambda_name }}"