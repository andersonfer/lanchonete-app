#!/bin/bash

set -e

echo "‚úÖ VALIDA√á√ÉO COMPLETA DA ETAPA 5"
echo "==============================="

# Verificar estrutura das aplica√ß√µes
echo "üìÅ 1/5 - VERIFICANDO ESTRUTURA DAS APLICA√á√ïES"
echo "--------------------------------------------"

if [ -d "applications/autoatendimento" ] && [ -d "applications/pagamento" ]; then
    echo "‚úÖ Estrutura de diret√≥rios criada"
else
    echo "‚ùå Estrutura de diret√≥rios n√£o encontrada"
    exit 1
fi

# Verificar POMs das aplica√ß√µes
if [ -f "applications/autoatendimento/pom.xml" ] && [ -f "applications/pagamento/pom.xml" ]; then
    echo "‚úÖ Arquivos pom.xml encontrados"
else
    echo "‚ùå Arquivos pom.xml n√£o encontrados"
    exit 1
fi

# Verificar ApiGatewayContextFilter
echo ""
echo "üîß 2/5 - VERIFICANDO CONTEXT FILTER"
echo "-----------------------------------"

FILTER_FILE="applications/autoatendimento/src/main/java/br/com/lanchonete/autoatendimento/infra/ApiGatewayContextFilter.java"
if [ -f "$FILTER_FILE" ]; then
    echo "‚úÖ ApiGatewayContextFilter.java encontrado"
    
    # Verificar se cont√©m headers esperados
    if grep -q "X-Cliente-ID" "$FILTER_FILE" && grep -q "X-Auth-Type" "$FILTER_FILE"; then
        echo "‚úÖ Headers de context injection implementados"
    else
        echo "‚ùå Headers de context injection n√£o implementados"
        exit 1
    fi
else
    echo "‚ùå ApiGatewayContextFilter.java n√£o encontrado"
    exit 1
fi

# Verificar Dockerfiles
echo ""
echo "üê≥ 3/5 - VERIFICANDO DOCKERFILES"
echo "--------------------------------"

if [ -f "applications/autoatendimento/Dockerfile" ] && [ -f "applications/pagamento/Dockerfile" ]; then
    echo "‚úÖ Dockerfiles criados"
    
    # Verificar se s√£o multi-stage builds
    if grep -q "FROM.*AS build" "applications/autoatendimento/Dockerfile"; then
        echo "‚úÖ Multi-stage build configurado"
    else
        echo "‚ùå Multi-stage build n√£o configurado"
        exit 1
    fi
else
    echo "‚ùå Dockerfiles n√£o encontrados"
    exit 1
fi

# Verificar configura√ß√µes Kubernetes
echo ""
echo "‚ò∏Ô∏è 4/5 - VERIFICANDO CONFIGURA√á√ïES KUBERNETES"
echo "--------------------------------------------"

K8S_CONFIG_AUTO="applications/autoatendimento/src/main/resources/application-kubernetes.yml"
K8S_CONFIG_PAG="applications/pagamento/src/main/resources/application-kubernetes.yml"

if [ -f "$K8S_CONFIG_AUTO" ] && [ -f "$K8S_CONFIG_PAG" ]; then
    echo "‚úÖ Configura√ß√µes Kubernetes encontradas"
    
    # Verificar se cont√©m configura√ß√µes de RDS
    if grep -q "DB_HOST" "$K8S_CONFIG_AUTO"; then
        echo "‚úÖ Configura√ß√µes de RDS implementadas"
    else
        echo "‚ùå Configura√ß√µes de RDS n√£o encontradas"
        exit 1
    fi
else
    echo "‚ùå Configura√ß√µes Kubernetes n√£o encontradas"
    exit 1
fi

# Verificar scripts criados
echo ""
echo "üìú 5/5 - VERIFICANDO SCRIPTS DE BUILD"
echo "------------------------------------"

SCRIPTS=("build-images.sh" "push-to-ecr.sh" "validate-apps.sh")
for script in "${SCRIPTS[@]}"; do
    if [ -f "scripts/$script" ] && [ -x "scripts/$script" ]; then
        echo "‚úÖ $script criado e execut√°vel"
    else
        echo "‚ùå $script n√£o encontrado ou n√£o execut√°vel"
        exit 1
    fi
done

# Verificar depend√™ncias no autoatendimento
echo ""
echo "üîç VERIFICA√á√ÉO ADICIONAL - DEPEND√äNCIAS"
echo "---------------------------------------"

if grep -q "spring-boot-starter-security" applications/autoatendimento/pom.xml; then
    echo "‚úÖ Spring Security adicionado ao autoatendimento"
else
    echo "‚ö†Ô∏è  Spring Security n√£o encontrado no autoatendimento"
fi

if grep -q "mysql-connector-j" applications/autoatendimento/pom.xml; then
    echo "‚úÖ MySQL connector configurado"
else
    echo "‚ùå MySQL connector n√£o configurado"
    exit 1
fi

echo ""
echo "üéâ ETAPA 5 VALIDADA COM SUCESSO!"
echo "==============================="
echo "‚úÖ Aplica√ß√µes migradas da Fase 2"
echo "‚úÖ ApiGatewayContextFilter implementado"
echo "‚úÖ Dockerfiles multi-stage criados"
echo "‚úÖ Configura√ß√µes Kubernetes adaptadas"
echo "‚úÖ Scripts de build e valida√ß√£o criados"
echo "‚úÖ Depend√™ncias corretas configuradas"
echo ""
echo "üöÄ PRONTO PARA PR√ìXIMA ETAPA!"
echo "üí° Pr√≥ximos passos:"
echo "   1. ./scripts/build-images.sh (testar build local)"
echo "   2. Prosseguir para ETAPA 6: Deploy Kubernetes"